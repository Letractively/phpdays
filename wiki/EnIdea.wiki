#summary Ideas for improving the project.
#labels Lang-En
#sidebar En

On this page we discuss new ideas for phpDays. Post your ideas below in comments.

=== Models with data checking ===

I leran Python language and it's Jango framework. Also I learn about Google Engine.

I very like it's models. We not create database and not describe database in files. We create model classes with fields description. after start our appplicaion generate database structure and use it. Very simple for use!

For example, create model classes:
{{{
class App_Model_User extends Days_Model {
  protected $_id = self::intField()->positive();
  protected $_name = self::stringField()->maxLen(200);
  protected $_age = self::intField()->max(70)->mix(18);
}
}}}

Base class `Days_Model` implement base methods for different field types.

Also database structure generated from this files (using reflaction).

=== Validator ===

[EnLibDaysValidate Days_Validate] - check a variable by criteria and return `true` only if its value is valid.

{{{
$age = 21;
$mail = 'Tom@Jerry.com';
// not good format of criteria
if (Days_Validator::check($age, array('int'=>array('max'=>50, 'min'=>18))))
  echo 'You are full of strength!';
// good format of criteria
if (Days_Validator::check($age, 'int: {max: 50, min: 18}'))
  echo 'You are full of strength!';
// many criterias
if (Days_Validator::check($mail, 'str: {max: 70}, email, required'))
  echo 'Name correct!';
}}}

Tasks:
 * simplify a criteria format _(good if data passes as string `check($age, 'int: {max: 50, min: 18}')` or similar format)_

=== Event (issue #15) ===

[EnLibDaysEvent Days_Event] - an implementation of the Observer pattern. Helps join many components to one system without changes in any component.

Days library events:
{{{
class Days_User {
  public function login($username, $password) {
    Days_Event::run('user.login.before');
    // process loginning
    if (/* logged well */) {
      Days_Event::run('user.login.success');
      ...
    }
    else {
      Days_Event::run('user.login.fail');
      ...
    }
    Days_Event::run('user.login.after');
  }
...
}}}

Your application events are in the [EnLibDaysModel models] _(add the name of your application before an event name)_:
{{{
class Myapp_Model_Rss {
  public function import($path) {
    Days_Event::run('myapp.rss.import.before');
    // process loginning
    if (/* data loaded from RSS */) {
      Days_Event::run('myapp.rss.import.success');
      ...
    }
    else {
      Days_Event::run('myapp.rss.import.fail');
      ...
    }
    Days_Event::run('myapp.rss.import.after');
  }
}
}}}

Now, we have to add a forum with a user authorization to the site. We use events in the forum.
{{{
// general Days event
Days_Event::add('user.login.success', 'userSuccessLogged');
// function called on success logging
function userSuccessLogged() {
  echo 'You logged successfully on site!';
}
// your application event
Days_Event::add('myapp.rss.import.fail', 'rssNotLoaded');
// callback function
function rssNotLoaded() {
  echo 'RSS not loaded. Enter correct URL adress';
}
}}}

See also: [http://docs.kohanaphp.com/general/events Kohana events], [http://devzone.zend.com/article/4284-Observer-pattern-in-PHP Zend Observer].

=== Form ===

[EnLibDaysForm Days_Form] - process html forms. If all data is passed correctly - execute a form handler.