== Общие сведения ==

Класс [http://code.google.com/p/phpdays/source/browse/trunk/lib/Days/Event.php Days_Event] реализует паттерн Observer, позволяет подписаться(назначить вызов функции) на определенное событие, оповещать(вызывать назначенные функции) при наступлении событий. Подписчиков на одно событие может быть несколько, оповещаются они по порядку подписки. <br>
События бывают системными и пользовательскими.

== Системные события ==

*system.ready* - событие наступает сразу после чтения конфигурационного файла, до начала работы ядра фреймворка. Подписаться на это событие можно, создав файл в app/autorun c вызовом Days_Event::add, параметр engine/enable_autorun должен быть равен 1.

*system.pre_controller* - событие, отрабатывающее сразу после определения какой контроллер нужно выполнять.

*system.post_init_controller* - наступает после отработки метода init() вызываемого контроллера.

*system.post_controller* - событие после получения контента от контроллера, но до включения его в контент страницы.

*system.shutdown* - событие завершения работы ядра фреймворка.

*system.send_headers* - событие перед отправкой заголовков сгенерированной страницы.

*system.send_content* - событие перед отправкой контента страницы.

=== Пример ===
Подписка на событие *system.send_content*

{{{
Days_Event::add('system.send_content','del_whitespace');

function del_whitespace() {
    Days_Response::setContent(preg_replace('#\s{2,}#','',Days_Response::getContent()));
}
}}}


== Пользовательские события ==
В своем приложении вы можете определять произвольные события. При этом ответственность за оповещение подписчиков о наступлении пользовательских событий ложиться на приложение. В таких событиях перед названием события указываем префикс приложения.

=== Примеры ===
1) События в классе Days_User фреймворка
{{{
class Days_User {
  public function login($username, $password) {
    Days_Event::run('user.login.before');
    // process loginning
    if (/* logged well */) {
      Days_Event::run('user.login.success');
      ...
    }
    else {
      Days_Event::run('user.login.fail');
      ...
    }
    Days_Event::run('user.login.after');
  }
...
}}}

2) Пользовательские события в приложении
{{{
class Myapp_Model_Rss {
  public function import($path) {
    Days_Event::run('myapp.rss.import.before');
    // process loginning
    if (/* data loaded from RSS */) {
      Days_Event::run('myapp.rss.import.success');
      ...
    }
    else {
      Days_Event::run('myapp.rss.import.fail');
      ...
    }
    Days_Event::run('myapp.rss.import.after');
  }
}
}}}

3) Подписка на пользовательские события в приложении
{{{
// general Days event
Days_Event::add('user.login.success', 'userSuccessLogged');
// function called on success logging
function userSuccessLogged() {
  echo 'You logged successfully on site!';
}
// your application event
Days_Event::add('myapp.rss.import.fail', 'rssNotLoaded');
// callback function
function rssNotLoaded() {
  echo 'RSS not loaded. Enter correct URL adress';
}
}}}