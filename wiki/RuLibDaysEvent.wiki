#summary Реализация шаблона проектирования наблюдатель (observer)
#labels Lang-Ru
#sidebar RuLib

== Общие сведения ==

Класс [http://code.google.com/p/phpdays/source/browse/trunk/lib/Days/Event.php Days_Event] реализует паттерн Observer, позволяет подписаться (назначить вызов функции) на определенное событие, оповещать (вызывать назначенные функции) при наступлении событий. Подписчиков на одно событие может быть несколько, оповещаются они по порядку подписки.

События бывают системными и пользовательскими.

== Системные события ==

*engine.start* - событие наступает сразу после чтения конфигурационного файла, до начала работы ядра фреймворка.

*controller.start* - событие, отрабатывающее сразу после определения какой контроллер нужно выполнять, перед исполнением самого контроллера.

*controller.post.init* - наступает после отработки метода init() вызываемого контроллера.

*controller.end* - событие после получения контента от контроллера, но до включения его в контент страницы.

*engine.end* - событие завершения работы ядра фреймворка.

*response.send.headers* - событие перед отправкой заголовков сгенерированной страницы.

*response.send.content* - событие перед отправкой контента страницы.

Подписаться на ранние события ядра можно, создав файл app/Controller/System/Autorun.php с классом App_Controller_System_Autorun, где App - префикс вашего приложения.
{{{
class Phpdays_Controller_System_Autorun {

    /**
     * Defines a list of subscribers to the event
     */
    public static function run() {
        Days_Event::add('engine.start','session_start');
    }
}
}}}
В статическом методе run() класса указываем вызовы Days_Event::add и остальной код, который необходимо выполнить сразу после инициализации ядра фреймворка. Параметр engine/autorun в конфигурационном файле приложения должен быть равен 1.

=== Пример ===

Подписка на событие *engine.end*

{{{
Days_Event::add('engine.end','Days_Log::save');
}}}


== Пользовательские события ==

В своем приложении вы можете определять произвольные события. При этом ответственность за оповещение подписчиков о наступлении пользовательских событий ложиться на приложение. В таких событиях перед названием события указываем префикс приложения.

=== Примеры ===

1) События в классе [RuLibDaysUser Days_User] фреймворка
{{{
class Days_User {
  public function login($username, $password) {
    Days_Event::run('user.login.before');
    // process loginning
    if (/* logged well */) {
      Days_Event::run('user.login.success');
      ...
    }
    else {
      Days_Event::run('user.login.fail');
      ...
    }
    Days_Event::run('user.login.after');
  }
...
}}}

2) Пользовательские события в приложении
{{{
class Myapp_Model_Rss {
  public function import($path) {
    Days_Event::run('myapp.rss.import.before');
    // process loginning
    if (/* data loaded from RSS */) {
      Days_Event::run('myapp.rss.import.success');
      ...
    }
    else {
      Days_Event::run('myapp.rss.import.fail');
      ...
    }
    Days_Event::run('myapp.rss.import.after');
  }
}
}}}

3) Подписка на пользовательские события в приложении
{{{
// general Days event
Days_Event::add('user.login.success', 'userSuccessLogged');
// function called on success logging
function userSuccessLogged() {
  echo 'You logged successfully on site!';
}
// your application event
Days_Event::add('myapp.rss.import.fail', 'rssNotLoaded');
// callback function
function rssNotLoaded() {
  echo 'RSS not loaded. Enter correct URL adress';
}
}}}